generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model ar_internal_metadata {
  key        String   @id @db.VarChar(255)
  value      String?  @db.VarChar(255)
  created_at DateTime @db.DateTime(6)
  updated_at DateTime @db.DateTime(6)
}

model Comment {
  id               BigInt   @id @default(autoincrement())
  commentable_type String   @db.VarChar(255)
  commentable_id   BigInt
  user_id          BigInt
  body             String   @db.Text
  created_at       DateTime @db.DateTime(0)
  updated_at       DateTime @db.DateTime(0)

  @@index([commentable_type, commentable_id], map: "index_comments_on_commentable_type_and_commentable_id")
  @@index([user_id], map: "index_comments_on_user_id")
  @@map("comments")
}

model Device {
  id                 BigInt   @id @default(autoincrement())
  user_id            BigInt
  registration_token String   @db.VarChar(255)
  created_at         DateTime @db.DateTime(0)
  updated_at         DateTime @db.DateTime(0)

  @@unique([user_id, registration_token], map: "index_devices_on_user_id_and_registration_token")
  @@index([registration_token], map: "index_devices_on_registration_token")
  @@index([user_id], map: "index_devices_on_user_id")
  @@map("devices")
}

model Follow {
  id              BigInt   @id @default(autoincrement())
  followable_type String   @db.VarChar(255)
  followable_id   BigInt
  follower_type   String   @db.VarChar(255)
  follower_id     BigInt
  blocked         Boolean  @default(false)
  created_at      DateTime @db.DateTime(0)
  updated_at      DateTime @db.DateTime(0)

  @@index([followable_id, followable_type], map: "fk_followables")
  @@index([follower_id, follower_type], map: "fk_follows")
  @@index([followable_type, followable_id], map: "index_follows_on_followable_type_and_followable_id")
  @@index([follower_type, follower_id], map: "index_follows_on_follower_type_and_follower_id")
  @@map("follows")
}

model Image {
  id         BigInt   @id @default(autoincrement())
  review_id  BigInt
  url        String   @unique(map: "index_images_on_url") @db.VarChar(255)
  created_at DateTime @db.DateTime(6)
  updated_at DateTime @db.DateTime(6)
  reviews    Review   @relation("imagesToreviews", fields: [review_id], references: [id], onUpdate: Restrict, map: "fk_rails_1831667bb6")

  @@index([review_id], map: "index_images_on_review_id")
  @@map("images")
}

model InappropriateContent {
  id             BigInt   @id @default(autoincrement())
  user_id        Int
  content_id_val Int
  content_type   String   @db.VarChar(255)
  reason_id_val  Int
  created_at     DateTime @db.DateTime(0)
  updated_at     DateTime @db.DateTime(0)

  @@index([user_id], map: "index_inappropriate_contents_on_user_id")
  @@map("inappropriate_contents")
}

model Invite {
  id             BigInt   @id @default(autoincrement())
  invitable_type String?  @db.VarChar(255)
  invitable_id   BigInt?
  sender_type    String?  @db.VarChar(255)
  sender_id      BigInt?
  recipient_type String?  @db.VarChar(255)
  recipient_id   BigInt?
  expired        Boolean? @default(false)
  created_at     DateTime @db.DateTime(0)
  updated_at     DateTime @db.DateTime(0)

  @@index([invitable_id, invitable_type], map: "index_invites_on_invitable_id_and_invitable_type")
  @@index([invitable_type, invitable_id], map: "index_invites_on_invitable_type_and_invitable_id")
  @@index([recipient_id, recipient_type], map: "index_invites_on_recipient_id_and_recipient_type")
  @@index([recipient_type, recipient_id], map: "index_invites_on_recipient_type_and_recipient_id")
  @@index([sender_id, sender_type], map: "index_invites_on_sender_id_and_sender_type")
  @@index([sender_type, sender_id], map: "index_invites_on_sender_type_and_sender_id")
  @@map("invites")
}

model Map {
  id          BigInt   @id @default(autoincrement())
  user_id     BigInt
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  private     Boolean? @default(true)
  invitable   Boolean? @default(false)
  shared      Boolean? @default(false)
  base_id_val String?  @db.VarChar(255)
  base_name   String?  @db.VarChar(255)
  created_at  DateTime @db.DateTime(0)
  updated_at  DateTime @db.DateTime(0)
  image_url   String?  @db.VarChar(255)
  user        User     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_rails_4ab1ab6be6")
  reviews     Review[]

  @@index([user_id], map: "index_maps_on_user_id")
  @@map("maps")
}

model Notification {
  id              BigInt   @id @default(autoincrement())
  notifiable_type String?  @db.VarChar(255)
  notifiable_id   BigInt?
  notifier_type   String?  @db.VarChar(255)
  notifier_id     BigInt?
  recipient_type  String?  @db.VarChar(255)
  recipient_id    BigInt?
  key             String?  @db.VarChar(255)
  read            Boolean? @default(false)
  created_at      DateTime @db.DateTime(0)
  updated_at      DateTime @db.DateTime(0)

  @@index([notifiable_id, notifiable_type], map: "index_notifications_on_notifiable_id_and_notifiable_type")
  @@index([notifiable_type, notifiable_id], map: "index_notifications_on_notifiable_type_and_notifiable_id")
  @@index([notifier_id, notifier_type], map: "index_notifications_on_notifier_id_and_notifier_type")
  @@index([notifier_type, notifier_id], map: "index_notifications_on_notifier_type_and_notifier_id")
  @@index([recipient_id, recipient_type], map: "index_notifications_on_recipient_id_and_recipient_type")
  @@index([recipient_type, recipient_id], map: "index_notifications_on_recipient_type_and_recipient_id")
  @@map("notifications")
}

model PlaceDetail {
  id                BigInt   @id @default(autoincrement())
  place_id_val      String   @db.VarChar(255)
  locale            Int
  name              String?  @db.Text
  lat               Float?   @db.Float
  lng               Float?   @db.Float
  formatted_address String?  @db.Text
  url               String?  @db.Text
  opening_hours     String?  @db.Text
  lost              Boolean  @default(false)
  created_at        DateTime @db.DateTime(6)
  updated_at        DateTime @db.DateTime(6)
  latitude          Decimal  @db.Decimal(16, 6)
  longitude         Decimal  @db.Decimal(16, 6)

  @@unique([place_id_val, locale], map: "index_place_details_on_place_id_val_and_locale")
  @@map("place_details")
}

model Place {
  id           BigInt   @id @default(autoincrement())
  place_id_val String   @unique(map: "index_places_on_place_id_val") @db.VarChar(255)
  created_at   DateTime @db.DateTime(6)
  updated_at   DateTime @db.DateTime(6)
  spots        Spot[]   @relation("placesTospots")

  @@map("places")
}

model PushNotification {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  followed   Boolean  @default(false)
  invited    Boolean  @default(false)
  liked      Boolean  @default(false)
  comment    Boolean  @default(false)
  created_at DateTime @db.DateTime(6)
  updated_at DateTime @db.DateTime(6)
  users      User     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_rails_653dc498bf")

  @@index([user_id], map: "index_push_notifications_on_user_id")
  @@map("push_notifications")
}

model Review {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  map_id     BigInt
  comment    String   @db.Text
  image_url  String?  @db.VarChar(255)
  created_at DateTime @db.DateTime(0)
  updated_at DateTime @db.DateTime(0)
  spot_id    BigInt
  user       User     @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "fk_rails_74a66bd6c5")
  spot       Spot     @relation("reviewsTospots", fields: [spot_id], references: [id], onUpdate: Restrict, map: "fk_rails_9dacbb31eb")
  map        Map      @relation(fields: [map_id], references: [id], onUpdate: Restrict, map: "fk_rails_a1ba3a65ca")
  images     Image[]  @relation("imagesToreviews")

  @@unique([spot_id, map_id, user_id], map: "index_reviews_on_spot_id_and_map_id_and_user_id")
  @@index([map_id], map: "index_reviews_on_map_id")
  @@index([user_id], map: "index_reviews_on_user_id")
  @@map("reviews")
}

model schema_migrations {
  version String @id @db.VarChar(255)
}

model Spot {
  id         BigInt   @id @default(autoincrement())
  map_id     BigInt
  created_at DateTime @db.DateTime(6)
  updated_at DateTime @db.DateTime(6)
  place_id   BigInt
  place      Place    @relation("placesTospots", fields: [place_id], references: [id], onUpdate: Restrict, map: "fk_rails_403579bfc1")
  reviews    Review[] @relation("reviewsTospots")

  @@unique([place_id, map_id], map: "index_spots_on_place_id_and_map_id")
  @@index([map_id], map: "index_spots_on_map_id")
  @@map("spots")
}

model User {
  id                 BigInt             @id @default(autoincrement())
  name               String?            @db.VarChar(255)
  email              String?            @db.VarChar(255)
  uid                String             @unique(map: "index_users_on_uid") @db.VarChar(255)
  image_path         String?            @unique(map: "index_users_on_image_path") @db.VarChar(255)
  created_at         DateTime           @db.DateTime(0)
  updated_at         DateTime           @db.DateTime(0)
  biography          String?            @db.VarChar(255)
  maps               Map[]
  push_notifications PushNotification[]
  reviews            Review[]

  @@map("users")
}

model Vote {
  id           BigInt   @id @default(autoincrement())
  votable_type String?  @db.VarChar(255)
  votable_id   BigInt?
  voter_type   String?  @db.VarChar(255)
  voter_id     BigInt?
  vote_flag    Boolean?
  vote_scope   String?  @db.VarChar(255)
  vote_weight  Int?
  created_at   DateTime @db.DateTime(0)
  updated_at   DateTime @db.DateTime(0)

  @@index([votable_id, votable_type, vote_scope], map: "index_votes_on_votable_id_and_votable_type_and_vote_scope")
  @@index([votable_type, votable_id], map: "index_votes_on_votable_type_and_votable_id")
  @@index([voter_id, voter_type, vote_scope], map: "index_votes_on_voter_id_and_voter_type_and_vote_scope")
  @@index([voter_type, voter_id], map: "index_votes_on_voter_type_and_voter_id")
  @@map("votes")
}
